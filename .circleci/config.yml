# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  ruby: circleci/ruby@1
  node: circleci/node@2

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
# jobs:
#   build: # our first job, named "build"
#     docker:
#       - image: cimg/ruby:2.7.2 # use a tailored CircleCI docker image.
#         auth:
#           username: mydockerhub-user
#           password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
#     steps:
#       - checkout # pull down our git code.
#       - ruby/install-deps # use the ruby orb to install dependencies
#       # use the node orb to install our packages
#       # specifying that we use `yarn` and to cache dependencies with `yarn.lock`
#       # learn more: https://circleci.com/docs/2.0/caching/
#       - node/install-packages:
#           pkg-manager: yarn
#           cache-key: "yarn.lock"
#       - restore_cache:
#           name: Restore Yarn Package Cache
#           keys:
#             - yarn-packages-{{ checksum "yarn.lock" }}
#
#   test:  # our next job, called "test"
#     # we run "parallel job containers" to enable speeding up our tests;
#     # this splits our tests across multiple containers.
#     parallelism: 3
#     # here we set TWO docker images.
#     docker:
#       - image: cimg/ruby:2.7.2 # this is our primary docker image, where step commands run.
#         auth:
#           username: mydockerhub-user
#           password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
#       - image: circleci/postgres:9.5-alpine
#         auth:
#           username: mydockerhub-user
#           password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
#         environment: # add POSTGRES environment variables.
#           POSTGRES_USER: circleci-demo-ruby
#           POSTGRES_DB: sweater_whether_test
#           POSTGRES_PASSWORD: ""
#     # environment variables specific to Ruby/Rails, applied to the primary container.
#     environment:
#       BUNDLE_JOBS: "3"
#       BUNDLE_RETRY: "3"
#       PGHOST: 127.0.0.1
#       PGUSER: circleci-demo-ruby
#       PGPASSWORD: ""
#       RAILS_ENV: test
#     # A series of steps to run, some are similar to those in "build".
#     steps:
#       - ruby/install-deps
#       - node/install-packages:
#           pkg-manager: yarn
#           cache-key: "yarn.lock"
#       - restore_cache:
#           name: Restore Yarn Package Cache
#           keys:
#             - yarn-packages-{{ checksum "yarn.lock" }}
#       # Here we make sure that the secondary container boots
#       # up before we run operations on the database.
#       - run:
#           name: Wait for DB
#           command: dockerize -wait tcp://localhost:5432 -timeout 1m
#       - run:
#           name: Database setup
#           command: bundle exec rails db:schema:load --trace
#       # Run rspec in parallel
#       - ruby/rspec-test
#
# # We use workflows to orchestrate the jobs that we declared above.
# workflows:
#   version: 2
#   build_and_test:     # The name of our workflow is "build_and_test"
#     jobs:             # The list of jobs we run as part of this workflow.
#       - build         # Run build first.
#       - test:         # Then run test,
#           requires:   # Test requires that build passes for it to run.
#             - build   # Finally, run the build job.
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    parallelism: 1 # run three instances of this job in parallel
    docker: # run the steps with Docker
      - image: circleci/ruby:2.7.2 # ...with this image as the primary container; this is where all `steps` will run
        environment: # environment variables for primary container
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: postgres
          RAILS_ENV: test
      - image: circleci/postgres:11 # database image
        environment: # environment variables for database, it is kind of obvious but it is important that they match with your test config in database.yml
          POSTGRES_USER: postgres
          POSTGRES_DB: sweater_whether_test
          POSTGRES_PASSWORD: sweater_whether_test
    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory
      # Which version of bundler?
      - run:
          name: Force Bundler Version
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler
      - run:
          name: Which bundler?
          command: bundle -v
      # Restore bundle cache
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run: # Install Ruby dependencies
          name: Bundle Install
          command: bundle install
      # Store bundle cache for Ruby dependencies
      - save_cache:
          key: yarn-packages-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bin/rails db:schema:load --trace
      - run:
          name: Run rspec in parallel
          command: |
            bundle exec rspec
